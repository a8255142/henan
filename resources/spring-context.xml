<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/data/mongo
    	http://www.springframework.org/schema/data/mongo/spring-mongo-1.8.xsd
    	http://www.springframework.org/schema/data/repository
        http://www.springframework.org/schema/data/repository/spring-repository-1.8.xsd" 
    	default-autowire="byType">
	<!-- Annotation Config -->
	<!-- 加载配置属性文件 -->
	<!-- <context:property-placeholder ignore-unresolvable="true" location="classpath:dataSource.properties" /> -->
    <!-- 引入数据库配置文件 -->
	<bean id="propertyConfigurer"    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	        <list>
	            <value>classpath:dataSource.properties</value>
	        </list>
	    </property>
	</bean>
	<context:annotation-config />
	<!-- 加入Aspectj配置 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<context:component-scan base-package="com.henan"></context:component-scan>

	
	<!-- ***************事务配置************** -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<aop:config>
		<aop:advisor pointcut="execution(* com.henan.*.service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="dealWithComposeData" propagation="REQUIRES_NEW" rollback-for="Exception" />
			<tx:method name="doExecute" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="runTask" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- MyBatis Sql -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:mappings/*.xml"></property>
	</bean>

	<!-- 扫描mapper.java 使用MapperScannerConfigurer 控制sqlsession的打开、关闭和事务回滚 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" autowire="byName">
	<!-- <bean class="cn.tyky.jeesystem.dzzz.common.utils.MapperScannerConfigurer" autowire="byName"> -->
		<property name="basePackage" value="com.henan.dao" />
		<property name="sqlSessionFactoryBeanName" value="sessionFactory" />
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"/> 
		这个配置会导致properties文件的内容加载不进来，原因是mybatis的MapperScannerConfigurer扫描模式造成bean加载顺序改变， 在PropertyPlaceholderConfigurer加载之前设置了sqlSessionFactory，所以自己配一个sqlSessionFactory（不能同名）， 然后用下面这条配置 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"/> <property name="sqlSessionFactoryBeanName" value="mybatisSqlSessionFactory" /> -->
	</bean>
	
	<!-- 数据源配置, 使用 druid 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
	
	<!-- 支持异步方法执行 -->
	<task:annotation-driven />

	<!-- 异步线程池 -->
	<bean id="threadPool" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="4" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="20" />
		<!-- 队列最大长度 >=mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务(无线程可用)的处理策略 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	
	<import resource="spring-context-mongo.xml"/>
	
</beans>

